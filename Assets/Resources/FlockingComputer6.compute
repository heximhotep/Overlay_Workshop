//#pragma kernel TimeStep
#pragma kernel CheckRanges
#pragma kernel TriParAdd
#pragma kernel CalculateWeightedAverages

#define AGENT_NUM 200

struct Agent
{
	float3 position, velocity;
};

struct FlockDatum
{
	float4 centroidTotal, headingTotal, spacingTotal;
};

RWStructuredBuffer<float4x4> AgentBuf;
RWStructuredBuffer<float4x4> DebugBuf;
RWStructuredBuffer<float4x4> XFormBuf;
RWStructuredBuffer<FlockDatum> FDataBuf;
RWStructuredBuffer<float4> CentroidParAddBuf, HeadingParAddBuf, SpacingParAddBuf;

float3 anchorPoint;

float centroidThreshold, headingThreshold, spacingThreshold;
float centroidWeight, headingWeight, spacingWeight;
float maxSpeed, maxForce;
float _time, deltaTime;

inline void Mat2Agent(uint idx, out Agent result)
{
	uint matIdx = idx / 2;
	uint locIdx = idx % 2;
	float4x4 data = AgentBuf[matIdx];
	result.position = locIdx == 0 ? data._m00_m10_m20 : data._m02_m12_m22;
	result.velocity = locIdx == 0 ? data._m01_m11_m21 : data._m03_m13_m23;
}

inline void Agent2Mat(uint idx, Agent agent)
{
	uint matIdx = idx / 2;
	uint locIdx = idx % 2;
	if (locIdx == 0)
	{
		AgentBuf[matIdx]._m00_m10_m20 = agent.position;
		AgentBuf[matIdx]._m01_m11_m21 = agent.velocity;
	}
	else
	{
		AgentBuf[matIdx]._m02_m12_m22 = agent.position;
		AgentBuf[matIdx]._m03_m13_m23 = agent.velocity;
	}
}

float3 limitVec(float3 v, float l)
{
	float al = length(v);
	if (al > l)
		v = v * l / al;
	return v;
}

void ClearDataBuf(uint groupnum)
{
	FlockDatum datum = FDataBuf[groupnum];
	datum.centroidTotal = float4(0, 0, 0, 0);
	datum.headingTotal = float4(0, 0, 0, 0);
	datum.spacingTotal = float4(0, 0, 0, 0);
	FDataBuf[groupnum] = datum;
}

[numthreads(AGENT_NUM, 3, 1)]
void CalculateWeightedAverages (uint3 id : SV_GroupThreadID)
{
	float3 centroidFactor = float3(0, 0, 0), headingFactor = float3(0, 0, 0), spacingFactor = float3(0, 0, 0);
	float3 acceleration = float3(0, 0, 0);
	Agent me;
	Mat2Agent(id.x, me);
	float4 total;
	if (id.y == 0)
		total = FDataBuf[id.x].centroidTotal;
	if (id.y == 1)
		total = FDataBuf[id.x].headingTotal;
	if (id.y == 2)
		total = FDataBuf[id.x].spacingTotal;

	if (total.w != 0 && !isnan(total.w))
	{
		if (id.y == 0)
		{
			centroidFactor = total.xyz * 1 / total.w;
			centroidFactor = normalize(centroidFactor - me.position) * maxSpeed;
		}
		if (id.y == 1)
		{
			headingFactor = total.xyz * 1 / total.w;
			headingFactor = normalize(headingFactor) * maxSpeed;
		}
		if (id.y == 2)
		{
			spacingFactor = total.xyz * 1 / total.w;
			spacingFactor = normalize(spacingFactor) * maxSpeed;
		}
	}
	GroupMemoryBarrierWithGroupSync();
	if (id.y == 0)
	{
		DebugBuf[id.x]._m00_m10_m20 = centroidFactor;
		DebugBuf[id.x]._m01_m11_m21 = headingFactor;
		DebugBuf[id.x]._m02_m12_m22 = spacingFactor;

		acceleration = centroidFactor * centroidWeight +
			headingFactor * headingWeight +
			spacingFactor * spacingWeight;

		if (length(me.position - anchorPoint) > 5)
		{
			acceleration += (anchorPoint - me.position) / 20;
			DebugBuf[id.x]._m03_m13_m23 = anchorPoint - me.position;
		}
			
		if (!isnan(length(acceleration)))
		{
			me.velocity += limitVec(acceleration, maxForce) * deltaTime;
			me.velocity = limitVec(me.velocity, maxSpeed);
			me.position += me.velocity * deltaTime;
			Agent2Mat(id.x, me);
		}

		

		float3 pos = me.position;
		float3 dir = normalize(me.velocity);
		float3 up = float3(0, 1, 0);
		float3 xaxis = normalize(cross(up, dir));
		float3 yaxis = normalize(cross(dir, xaxis));

		float4x4 result = float4x4(xaxis.x, yaxis.x, dir.x, pos.x,
			xaxis.y, yaxis.y, dir.y, pos.y,
			xaxis.z, yaxis.z, dir.z, pos.z,
			0, 0, 0, 1);

		//if (isfinite(determinant(result)) && determinant(result) > 0)
		XFormBuf[id.x] = result;
		ClearDataBuf(id.x);
	}
}

[numthreads(AGENT_NUM, 3, 1)]
void CheckRanges (uint3 myID : SV_GroupID, uint3 otherID : SV_GroupThreadID)
{
	uint myIdx = myID.x;
	uint bufferIdx = otherID.y;
	uint otherIdx = otherID.x;
	Agent me, other;
	Mat2Agent(myIdx, me);
	Mat2Agent(otherIdx, other);

	float3 offset = me.position - other.position;
	float dist = abs(length(offset));
	
	bool notSame = myIdx != otherIdx;

	bool inRange;
	if (bufferIdx == 0)
		inRange = notSame && dist < centroidThreshold;
	if (bufferIdx == 1)
		inRange = notSame && dist < headingThreshold;
	if (bufferIdx == 2)
		inRange = notSame && dist < spacingThreshold;
	
	float weight;
	if (myIdx == 0)
	{
		if (bufferIdx == 0)
			DebugBuf[otherIdx]._m30 = inRange;
		if (bufferIdx == 1)
			DebugBuf[otherIdx]._m31 = inRange;
		if (bufferIdx == 2)
			DebugBuf[otherIdx]._m32 = inRange;
	}
	if (inRange)
	{
		
		if (bufferIdx == 0)
		{
			weight = sqrt(centroidThreshold - dist);
			CentroidParAddBuf[myIdx * AGENT_NUM + otherIdx] = float4(other.position * weight, weight);
			if (myIdx == 0)
			{
				DebugBuf[otherIdx]._m00_m01_m02_m03 = float4(other.position * weight, weight);
			}
		}
		if (bufferIdx == 1)
		{
			weight = sqrt(headingThreshold - dist);
			HeadingParAddBuf[myIdx * AGENT_NUM + otherIdx] = float4(other.velocity * weight, weight);
			if (myIdx == 0)
			{
				DebugBuf[otherIdx]._m10_m11_m12_m13 = float4(other.velocity * weight, weight);
			}
		}
		if (bufferIdx == 2)
		{
			weight = sqrt(spacingThreshold - dist);
			SpacingParAddBuf[myIdx * AGENT_NUM + otherIdx] = float4(offset * weight, weight);
			if (myIdx == 0)
			{
				DebugBuf[otherIdx]._m20_m21_m22_m23 = float4(offset * weight, weight);
			}
		}
	}
}

[numthreads(AGENT_NUM, 3, 1)]
void TriParAdd(uint3 gid : SV_GroupID, uint3 tid : SV_GroupThreadID)
{
	uint groupOffset = gid.x * AGENT_NUM;
	uint i = 1;
	uint n = ceil(log2(AGENT_NUM)) + 1;
	[unroll((int)ceil(log2(AGENT_NUM)))]
	while (i < n)
	{
		int threadCheck = tid.x % pow(2, i);
		bool canAdd = threadCheck == 0 && tid.x + pow(2, i - 1) < AGENT_NUM;

		if (canAdd)
		{
			if (tid.y == 0)
				CentroidParAddBuf[groupOffset + tid.x] += CentroidParAddBuf[groupOffset + tid.x + pow(2, i - 1)];
			if (tid.y == 1)
				HeadingParAddBuf[groupOffset + tid.x] += HeadingParAddBuf[groupOffset + tid.x + pow(2, i - 1)];
			if (tid.y == 2)
				SpacingParAddBuf[groupOffset + tid.x] += SpacingParAddBuf[groupOffset + tid.x + pow(2, i - 1)];
		}
		GroupMemoryBarrierWithGroupSync();
		i += 1;
	}
	GroupMemoryBarrierWithGroupSync();
	if (tid.x == 0)
	{
		if(tid.y == 0)
			FDataBuf[gid.x].centroidTotal = CentroidParAddBuf[groupOffset + tid.x];
		if (tid.y == 1)
			FDataBuf[gid.x].headingTotal = HeadingParAddBuf[groupOffset + tid.x];
		if (tid.y == 2)
			FDataBuf[gid.x].spacingTotal = SpacingParAddBuf[groupOffset + tid.x];
	}
	GroupMemoryBarrierWithGroupSync();
	CentroidParAddBuf[groupOffset + tid.x] = float4(0, 0, 0, 0);
	HeadingParAddBuf[groupOffset + tid.x] = float4(0, 0, 0, 0);
	SpacingParAddBuf[groupOffset + tid.x] = float4(0, 0, 0, 0);
}


/*
[numthreads(AGENT_NUM,1,1)]
void TimeStep (uint3 baseIdx : SV_GroupID, uint3 otherIdx : SV_GroupThreadID)
{
	uint myIdx = baseIdx.x;
	uint theirIdx = otherIdx.x;
	Agent me, other;
	Mat2Agent(myIdx, me);
	Mat2Agent(theirIdx, other);

	//calculate the difference between my position and the other's position
	float3 offset = me.position - other.position;
	float dist = abs(length(offset));

	//ensure that me and other are not the same
	bool notSame = myIdx != theirIdx;

	//check if the distance between me and other is within various thresholds
	bool addCentroid = notSame && dist < centroidThreshold;
	bool addHeading = notSame && dist < headingThreshold;
	bool addSpacing = notSame && dist < spacingThreshold;

	//if we are close enough together for centroid calculation...
	if (addCentroid)
	{
		//determine the weighting of this position in the final centroid
		float weight = sqrt(centroidThreshold - dist);
		//add the position of other into the parallel add buffer
		ParAddBuf[myIdx * AGENT_NUM + theirIdx] = float4(other.position * weight, weight);
	}

	//block until all others have been evaluated
	GroupMemoryBarrierWithGroupSync();
	//begin parallel addition for centroids:
	uint groupOffset = myIdx * AGENT_NUM;
	uint i = 1;
	uint n = ceil(log2(AGENT_NUM)) + 1;
	[unroll((int)ceil(log2(AGENT_NUM)))]
	while (i < n)
	{
		int threadCheck = theirIdx % pow(2, i);
		bool canAdd = threadCheck == 0 && theirIdx + pow(2, i - 1) < AGENT_NUM;

		if (canAdd)
			ParAddBuf[groupOffset + theirIdx] += ParAddBuf[groupOffset + theirIdx + pow(2, i - 1)];
		GroupMemoryBarrierWithGroupSync();
		i += 1;
	}
	GroupMemoryBarrierWithGroupSync();
	if (theirIdx % AGENT_NUM == 0)
	{
		FDataBuf[myIdx].centroidTotal = ParAddBuf[groupOffset + theirIdx];
	}
	GroupMemoryBarrierWithGroupSync();
	//end parallel addition for centroids
	//
	//we now clear the parallel add buffer to prepare for the next calculation
	ClearParBuf(theirIdx, myIdx);

	//if we are close enough together for heading calculation...
	if (addHeading)
	{
		//determine the weighting for this heading in final heading
		float weight = sqrt(headingThreshold - dist);
		ParAddBuf[myIdx * AGENT_NUM + theirIdx] = float4(other.velocity * weight, weight);
	}

	//block until all others have been evaluated
	GroupMemoryBarrierWithGroupSync();
	//begin parallel addition for heading:
	i = 1;
	n = ceil(log2(AGENT_NUM)) + 1;
	[unroll((int)ceil(log2(AGENT_NUM)))]
	while (i < n)
	{
		int threadCheck = theirIdx % pow(2, i);
		bool canAdd = threadCheck == 0 && theirIdx + pow(2, i - 1) < AGENT_NUM;

		if (canAdd)
			ParAddBuf[groupOffset + theirIdx] += ParAddBuf[groupOffset + theirIdx + pow(2, i - 1)];
		GroupMemoryBarrierWithGroupSync();
		i += 1;
	}
	GroupMemoryBarrierWithGroupSync();
	if (theirIdx % AGENT_NUM == 0)
	{
		FDataBuf[myIdx].headingTotal = ParAddBuf[groupOffset + theirIdx];
	}
	GroupMemoryBarrierWithGroupSync();
	//
	//end parallel addition for heading
	//clear parallel add buffer to prepare for next calculation
	ClearParBuf(theirIdx, myIdx);

	//if we are close enough together for spacing calculation
	if (addSpacing)
	{
		//determine weighting of this offset in final spacing
		float weight = sqrt(spacingThreshold - dist);
		ParAddBuf[myIdx * AGENT_NUM + theirIdx] = float4(offset * weight, weight);
	}

	//block until all spacings have been evaluated
	GroupMemoryBarrierWithGroupSync();
	//ParAdd(theirIdx, myIdx, FDataBuf[myIdx].spacingTotal);
	//
	//begin parallel addition for spacing
	i = 1;
	n = ceil(log2(AGENT_NUM)) + 1;
	[unroll((int)ceil(log2(AGENT_NUM)))]
	while (i < n)
	{
		int threadCheck = theirIdx % pow(2, i);
		bool canAdd = threadCheck == 0 && theirIdx + pow(2, i - 1) < AGENT_NUM;

		if (canAdd)
			ParAddBuf[groupOffset + theirIdx] += ParAddBuf[groupOffset + theirIdx + pow(2, i - 1)];
		GroupMemoryBarrierWithGroupSync();
		i += 1;
	}
	GroupMemoryBarrierWithGroupSync();
	if (theirIdx % AGENT_NUM == 0)
	{
		FDataBuf[myIdx].spacingTotal = ParAddBuf[groupOffset + theirIdx];
	}
	GroupMemoryBarrierWithGroupSync();
	//end parallel addition for spacing
	//clear parallel add buffer for good measure
	ClearParBuf(theirIdx, myIdx);
	
	//now only the 0th indexed thread executes:
	if (theirIdx == 0)
	{
		//retrieve the FlockDatum struct and extract the three previously calculated sums
		FlockDatum datum = FDataBuf[myIdx];
		TestBuf[myIdx]._m00_m10_m20_m30 = datum.centroidTotal;
		TestBuf[myIdx]._m01_m11_m21_m31 = datum.headingTotal;
		TestBuf[myIdx]._m02_m12_m22_m32 = datum.spacingTotal;

		float3 acceleration = float3(0, 0, 0);
		float3 centroidFactor = float3(0, 0, 0);
		float3 headingFactor = float3(0, 0, 0);
		float3 spacingFactor = float3(0, 0, 0);

		//if the centroid total is nonzero...
		if (datum.centroidTotal.w != 0)
		{
			//divide the centroid total by the weight total
			centroidFactor = datum.centroidTotal.xyz * 1 / datum.centroidTotal.w;
			centroidFactor = normalize(centroidFactor - me.position) * maxSpeed;
		}

		//if the heading total is nonzero...
		if (datum.headingTotal.w != 0)
		{
			//divide the heading total by the weight total
			headingFactor = datum.headingTotal.xyz * 1 / datum.headingTotal.w;
			headingFactor = normalize(headingFactor) * maxSpeed;
		}

		//if the spacing total is nonzero...
		if (datum.spacingTotal.w != 0)
		{
			//divide the spacing total by the weight total
			spacingFactor = datum.spacingTotal.xyz * 1 / datum.spacingTotal.w;
			spacingFactor = normalize(spacingFactor) * maxSpeed;
		}

		//acceleration is determined by the weighted sum of centroid, heading and spacing factors
		acceleration = centroidFactor * centroidWeight +
			headingFactor * headingWeight +
			spacingFactor * spacingWeight;// -me.velocity;

		//if we are far enough away from the anchor point...
		if (length(me.position - anchorPoint) > 45)
		{
			//we add a force pointing toward the anchor point to the acceleration
			acceleration += (anchorPoint - me.position) * 1 / 4;
		}
		
		//if we have successfully calculated a valid acceleration...
		if (!isnan(length(acceleration)))
		{
			//limit the acceleration by maxForce, weight it according to deltaTime, and add it to velocity
			me.velocity += limitVec(acceleration, maxForce) * deltaTime;
			//limit the new acceleration by maxSpeed
			me.velocity = limitVec(me.velocity, maxSpeed);
			//weight velocity according to deltaTime and add it to position
			me.position += me.velocity * deltaTime;
			//encode and store updated agent values in the agent matrix
			Agent2Mat(myIdx, me);
		}
		//we now calculate the transformation matrix for the current agent
		float3 pos = me.position;
		float3 dir = normalize(me.velocity);
		float3 up = float3(0, 1, 0);
		float3 xaxis = normalize(cross(up, dir));
		float3 yaxis = normalize(cross(dir, xaxis));

		float4x4 result = float4x4(xaxis.x, yaxis.x, dir.x, pos.x,
			                       xaxis.y, yaxis.y, dir.y, pos.y,
			                       xaxis.z, yaxis.z, dir.z, pos.z,
			                             0,       0,     0,     1);

		//update the transform buffer with the new transformation matrix
		XFormBuf[myIdx] = result;
		//clear the data buffer for good measure
		ClearDataBuf(myIdx);
	}
}
*/